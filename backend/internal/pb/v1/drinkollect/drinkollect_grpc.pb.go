// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/v1/drinkollect.proto

package drinkollect

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DrinkollectClient is the client API for Drinkollect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DrinkollectClient interface {
	// Register registers a new user and returns a token to be used for authorization.
	// InvalidArgument is returned if one of the request parameters is invalid.
	// AlreadyExists is returned if a user with such username already exists.
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Login logins an existing user and returns a token to be used for authorization.
	// InvalidArgument is returned if no such user exists or the password is invalid.
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// ChangePassword changes an authorized user's password.
	// InvalidArgument is returned if the specified password doesn't match the one in the DB.
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAccount deletes the authorized user's account.
	DeleteAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreatePost creates a new post for an authorized user.
	// InvalidArgument is returned if the post title is empty. Other arguments aren't validated.
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListPosts lists all created posts.
	ListPosts(ctx context.Context, in *ListPostsRequest, opts ...grpc.CallOption) (*ListPostsResponse, error)
	// TogglePostLike toggles the "liked" label a specific post by the current user.
	// NotFound is returned if no such post exists. This should never occur, since post ID is taken from the response of ListPosts/ListUserPosts.
	TogglePostLike(ctx context.Context, in *TogglePostLikeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListUserPosts lists the post of a specific user and returns the total number of posts the user has.
	ListUserPosts(ctx context.Context, in *ListUserPostsRequest, opts ...grpc.CallOption) (*ListUserPostsResponse, error)
}

type drinkollectClient struct {
	cc grpc.ClientConnInterface
}

func NewDrinkollectClient(cc grpc.ClientConnInterface) DrinkollectClient {
	return &drinkollectClient{cc}
}

func (c *drinkollectClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/drinkollect.v1.Drinkollect/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinkollectClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/drinkollect.v1.Drinkollect/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinkollectClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drinkollect.v1.Drinkollect/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinkollectClient) DeleteAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drinkollect.v1.Drinkollect/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinkollectClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drinkollect.v1.Drinkollect/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinkollectClient) ListPosts(ctx context.Context, in *ListPostsRequest, opts ...grpc.CallOption) (*ListPostsResponse, error) {
	out := new(ListPostsResponse)
	err := c.cc.Invoke(ctx, "/drinkollect.v1.Drinkollect/ListPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinkollectClient) TogglePostLike(ctx context.Context, in *TogglePostLikeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drinkollect.v1.Drinkollect/TogglePostLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinkollectClient) ListUserPosts(ctx context.Context, in *ListUserPostsRequest, opts ...grpc.CallOption) (*ListUserPostsResponse, error) {
	out := new(ListUserPostsResponse)
	err := c.cc.Invoke(ctx, "/drinkollect.v1.Drinkollect/ListUserPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DrinkollectServer is the server API for Drinkollect service.
// All implementations must embed UnimplementedDrinkollectServer
// for forward compatibility
type DrinkollectServer interface {
	// Register registers a new user and returns a token to be used for authorization.
	// InvalidArgument is returned if one of the request parameters is invalid.
	// AlreadyExists is returned if a user with such username already exists.
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Login logins an existing user and returns a token to be used for authorization.
	// InvalidArgument is returned if no such user exists or the password is invalid.
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// ChangePassword changes an authorized user's password.
	// InvalidArgument is returned if the specified password doesn't match the one in the DB.
	ChangePassword(context.Context, *ChangePasswordRequest) (*emptypb.Empty, error)
	// DeleteAccount deletes the authorized user's account.
	DeleteAccount(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// CreatePost creates a new post for an authorized user.
	// InvalidArgument is returned if the post title is empty. Other arguments aren't validated.
	CreatePost(context.Context, *CreatePostRequest) (*emptypb.Empty, error)
	// ListPosts lists all created posts.
	ListPosts(context.Context, *ListPostsRequest) (*ListPostsResponse, error)
	// TogglePostLike toggles the "liked" label a specific post by the current user.
	// NotFound is returned if no such post exists. This should never occur, since post ID is taken from the response of ListPosts/ListUserPosts.
	TogglePostLike(context.Context, *TogglePostLikeRequest) (*emptypb.Empty, error)
	// ListUserPosts lists the post of a specific user and returns the total number of posts the user has.
	ListUserPosts(context.Context, *ListUserPostsRequest) (*ListUserPostsResponse, error)
	mustEmbedUnimplementedDrinkollectServer()
}

// UnimplementedDrinkollectServer must be embedded to have forward compatible implementations.
type UnimplementedDrinkollectServer struct {
}

func (UnimplementedDrinkollectServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedDrinkollectServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedDrinkollectServer) ChangePassword(context.Context, *ChangePasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedDrinkollectServer) DeleteAccount(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedDrinkollectServer) CreatePost(context.Context, *CreatePostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedDrinkollectServer) ListPosts(context.Context, *ListPostsRequest) (*ListPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPosts not implemented")
}
func (UnimplementedDrinkollectServer) TogglePostLike(context.Context, *TogglePostLikeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TogglePostLike not implemented")
}
func (UnimplementedDrinkollectServer) ListUserPosts(context.Context, *ListUserPostsRequest) (*ListUserPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserPosts not implemented")
}
func (UnimplementedDrinkollectServer) mustEmbedUnimplementedDrinkollectServer() {}

// UnsafeDrinkollectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DrinkollectServer will
// result in compilation errors.
type UnsafeDrinkollectServer interface {
	mustEmbedUnimplementedDrinkollectServer()
}

func RegisterDrinkollectServer(s grpc.ServiceRegistrar, srv DrinkollectServer) {
	s.RegisterService(&Drinkollect_ServiceDesc, srv)
}

func _Drinkollect_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinkollectServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drinkollect.v1.Drinkollect/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinkollectServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drinkollect_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinkollectServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drinkollect.v1.Drinkollect/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinkollectServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drinkollect_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinkollectServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drinkollect.v1.Drinkollect/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinkollectServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drinkollect_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinkollectServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drinkollect.v1.Drinkollect/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinkollectServer).DeleteAccount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drinkollect_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinkollectServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drinkollect.v1.Drinkollect/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinkollectServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drinkollect_ListPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinkollectServer).ListPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drinkollect.v1.Drinkollect/ListPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinkollectServer).ListPosts(ctx, req.(*ListPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drinkollect_TogglePostLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TogglePostLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinkollectServer).TogglePostLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drinkollect.v1.Drinkollect/TogglePostLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinkollectServer).TogglePostLike(ctx, req.(*TogglePostLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drinkollect_ListUserPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinkollectServer).ListUserPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drinkollect.v1.Drinkollect/ListUserPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinkollectServer).ListUserPosts(ctx, req.(*ListUserPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Drinkollect_ServiceDesc is the grpc.ServiceDesc for Drinkollect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Drinkollect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drinkollect.v1.Drinkollect",
	HandlerType: (*DrinkollectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Drinkollect_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Drinkollect_Login_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Drinkollect_ChangePassword_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _Drinkollect_DeleteAccount_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _Drinkollect_CreatePost_Handler,
		},
		{
			MethodName: "ListPosts",
			Handler:    _Drinkollect_ListPosts_Handler,
		},
		{
			MethodName: "TogglePostLike",
			Handler:    _Drinkollect_TogglePostLike_Handler,
		},
		{
			MethodName: "ListUserPosts",
			Handler:    _Drinkollect_ListUserPosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/drinkollect.proto",
}
